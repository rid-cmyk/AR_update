generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id               Int              @id @default(autoincrement())
  username         String           @unique
  password         String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  foto             String?
  namaLengkap      String
  noTlp            String?
  roleId           Int
  passCode         String?
  alamat           String?
  Absensi          Absensi[]
  logs             AuditLog[]
  Hafalan          Hafalan[]
  guruHalaqah      Halaqah[]
  HalaqahSantri    HalaqahSantri[]
  notif            Notifikasi[]
  sebagaiOrangTua  OrangTuaSantri[] @relation("OrangTua")
  anak             OrangTuaSantri[] @relation("Santri")
  pengumumanDibuat Pengumuman[]
  pengumumanDibaca PengumumanRead[]
  Prestasi         Prestasi[]
  TargetHafalan    TargetHafalan[]
  Ujian            Ujian[]
  guruPermissions  GuruPermission[] @relation("GuruPermissions")
  role             Role             @relation(fields: [roleId], references: [id])
  
  // Template dan Raport Relations
  templateUjianCreated   TemplateUjian[]   @relation("TemplateUjianCreator")
  templateRaportCreated  TemplateRaport[]  @relation("TemplateRaportCreator")
  tahunAkademikCreated   TahunAkademik[]   @relation("TahunAkademikCreator")
  ujianVerified          Ujian[]           @relation("UjianVerifier")
  raportSantri           Raport[]          @relation("RaportSantri")
}

model Halaqah {
  id          Int             @id @default(autoincrement())
  namaHalaqah String
  guruId      Int
  guru        User            @relation(fields: [guruId], references: [id])
  santri      HalaqahSantri[]
  jadwal      Jadwal[]
  ujian       Ujian[]
  permissions GuruPermission[] @relation("HalaqahPermissions")
}

model HalaqahSantri {
  id            Int      @id @default(autoincrement())
  tahunAkademik String
  semester      Semester
  halaqahId     Int
  santriId      Int
  halaqah       Halaqah  @relation(fields: [halaqahId], references: [id])
  santri        User     @relation(fields: [santriId], references: [id])
}

model Hafalan {
  id          Int           @id @default(autoincrement())
  tanggal     DateTime
  surat       String
  ayatMulai   Int
  ayatSelesai Int
  status      StatusHafalan
  keterangan  String?
  santriId    Int
  santri      User          @relation(fields: [santriId], references: [id])
}

model TargetHafalan {
  id         Int          @id @default(autoincrement())
  surat      String
  ayatTarget Int
  deadline   DateTime
  status     StatusTarget
  santriId   Int
  santri     User         @relation(fields: [santriId], references: [id])
}

model Jadwal {
  id         Int       @id @default(autoincrement())
  hari       Hari
  jamMulai   DateTime
  jamSelesai DateTime
  halaqahId  Int
  
  // NEW FIELDS untuk recurring schedule
  isTemplate Boolean   @default(true)   // Apakah ini template atau jadwal spesifik
  tanggalMulai DateTime? // Tanggal mulai berlaku (opsional)
  tanggalSelesai DateTime? // Tanggal selesai berlaku (opsional)
  isActive   Boolean   @default(true)   // Status aktif/nonaktif
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  absensi    Absensi[]
  halaqah    Halaqah   @relation(fields: [halaqahId], references: [id])
}

model Absensi {
  id       Int           @id @default(autoincrement())
  status   StatusAbsensi
  tanggal  DateTime
  santriId Int
  jadwalId Int
  jadwal   Jadwal        @relation(fields: [jadwalId], references: [id])
  santri   User          @relation(fields: [santriId], references: [id])
}

model Prestasi {
  id           Int     @id @default(autoincrement())
  namaPrestasi String
  keterangan   String?
  kategori     String?
  tahun        Int
  santriId     Int
  validated    Boolean @default(false)
  santri       User    @relation(fields: [santriId], references: [id])
}

model Raport {
  id                Int             @id @default(autoincrement())
  semester          Semester
  tahunAkademik     String
  santriId          Int
  nilaiRataRata     Float?          // Nilai rata-rata keseluruhan
  totalNilaiAkhir   Float?          // Total nilai akhir
  ranking           Int?            // Ranking santri
  keteranganLulus   String?         // Lulus/Tidak Lulus/Remedial
  catatanGuru       String?         // Catatan dari guru pembimbing
  status            StatusRaport    @default(draft)
  generatedAt       DateTime?       // Kapan raport di-generate
  printedAt         DateTime?       // Kapan raport dicetak
  templateRaportId  Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  santri            User            @relation("RaportSantri", fields: [santriId], references: [id])
  templateRaport    TemplateRaport? @relation(fields: [templateRaportId], references: [id])
  details           RaportDetail[]
  ujian             Ujian[]
}

model RaportDetail {
  id             Int      @id @default(autoincrement())
  jenisUjian     JenisUjian
  nilaiUjian     Float
  jumlahUjian    Int      @default(1)
  nilaiRataRata  Float    // Rata-rata nilai per jenis ujian
  catatan        String?
  raportId       Int
  raport         Raport   @relation(fields: [raportId], references: [id], onDelete: Cascade)
}

// Template Ujian - Pengaturan template dasar untuk semua jenis ujian
model TemplateUjian {
  id                Int                     @id @default(autoincrement())
  namaTemplate      String                  @unique
  jenisUjian        JenisUjian
  deskripsi         String?
  isActive          Boolean                 @default(true)
  tahunAkademik     String
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  createdBy         Int
  creator           User                    @relation("TemplateUjianCreator", fields: [createdBy], references: [id])
  komponenPenilaian KomponenPenilaian[]
  ujian             Ujian[]
}

// Komponen Penilaian - Detail aspek penilaian dalam template ujian
model KomponenPenilaian {
  id              Int           @id @default(autoincrement())
  namaKomponen    String        // Kelancaran, Ketepatan Ayat, Tajwid & Makhraj, Adab & Sikap
  bobotNilai      Float         // Persentase bobot (0-100)
  nilaiMaksimal   Float         @default(100)
  deskripsi       String?
  urutan          Int           @default(1)
  templateUjianId Int
  templateUjian   TemplateUjian @relation(fields: [templateUjianId], references: [id], onDelete: Cascade)
  nilaiUjian      NilaiUjian[]
}

// Template Raport - Pengaturan template raport
model TemplateRaport {
  id                Int      @id @default(autoincrement())
  namaTemplate      String   @unique
  logoLembaga       String?  // Path ke file logo
  namaLembaga       String
  alamatLembaga     String?
  headerKopSurat    String?
  footerRaport      String?
  tandaTanganKepala String?  // Path ke file tanda tangan
  namaKepala        String?
  jabatanKepala     String?
  formatTampilan    Json     // JSON untuk konfigurasi tampilan
  isActive          Boolean  @default(true)
  tahunAkademik     String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         Int
  creator           User     @relation("TemplateRaportCreator", fields: [createdBy], references: [id])
  raport            Raport[]
}

// Tahun Akademik - Setting tahun ajaran
model TahunAkademik {
  id            Int      @id @default(autoincrement())
  tahunAkademik String   @unique // Format: "2024/2025"
  tanggalMulai  DateTime
  tanggalSelesai DateTime
  isActive      Boolean  @default(false)
  semester      Semester @default(S1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     Int
  creator       User     @relation("TahunAkademikCreator", fields: [createdBy], references: [id])
}

model Ujian {
  id              Int           @id @default(autoincrement())
  jenis           JenisUjian
  nilaiAkhir      Float         // Nilai akhir hasil perhitungan bobot
  tanggal         DateTime
  keterangan      String?
  detailPenilaian Json?         // Detail penilaian per juz/halaman
  status          StatusUjian   @default(draft)
  verifiedAt      DateTime?
  verifiedBy      Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  santriId        Int
  halaqahId       Int
  raportId        Int?
  templateUjianId Int
  templateUjian   TemplateUjian @relation(fields: [templateUjianId], references: [id])
  halaqah         Halaqah       @relation(fields: [halaqahId], references: [id])
  raport          Raport?       @relation(fields: [raportId], references: [id])
  santri          User          @relation(fields: [santriId], references: [id])
  verifier        User?         @relation("UjianVerifier", fields: [verifiedBy], references: [id])
  nilaiUjian      NilaiUjian[]
}

// Nilai Ujian - Detail nilai per komponen penilaian
model NilaiUjian {
  id                  Int               @id @default(autoincrement())
  nilai               Float
  catatan             String?
  ujianId             Int
  komponenPenilaianId Int
  ujian               Ujian             @relation(fields: [ujianId], references: [id], onDelete: Cascade)
  komponenPenilaian   KomponenPenilaian @relation(fields: [komponenPenilaianId], references: [id])
}

model Notifikasi {
  id      Int       @id @default(autoincrement())
  pesan   String
  tanggal DateTime  @default(now())
  type    NotifType
  refId   Int?
  userId  Int
  user    User      @relation(fields: [userId], references: [id])
}

model Grafik {
  id         Int     @id @default(autoincrement())
  tipeGrafik String
  periode    String
  dataJson   Json
  refId      Int?
  refType    RefType
}

model Backup {
  id            Int      @id @default(autoincrement())
  namaFile      String
  tanggalBackup DateTime @default(now())
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  action     String
  keterangan String?
  tanggal    DateTime @default(now())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
}

model Pengumuman {
  id                Int              @id @default(autoincrement())
  judul             String
  isi               String
  tanggal           DateTime         @default(now())
  createdAt         DateTime         @default(now())
  createdBy         Int
  tanggalKadaluarsa DateTime?
  targetAudience    TargetAudience   @default(semua)
  updatedAt         DateTime         @updatedAt
  creator           User             @relation(fields: [createdBy], references: [id])
  dibacaOleh        PengumumanRead[]
}

model PengumumanRead {
  id           Int        @id @default(autoincrement())
  pengumumanId Int
  userId       Int
  dibacaPada   DateTime   @default(now())
  pengumuman   Pengumuman @relation(fields: [pengumumanId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pengumumanId, userId])
}

model OrangTuaSantri {
  id         Int  @id @default(autoincrement())
  orangTuaId Int
  santriId   Int
  orangTua   User @relation("OrangTua", fields: [orangTuaId], references: [id])
  santri     User @relation("Santri", fields: [santriId], references: [id])

  @@unique([orangTuaId, santriId])
}

model GuruPermission {
  id         Int     @id @default(autoincrement())
  guruId     Int     // Guru yang diberi permission
  halaqahId  Int     // Halaqah yang boleh diakses
  canAbsensi Boolean @default(true)   // Bisa input absensi
  canHafalan Boolean @default(false)  // Bisa input hafalan
  canTarget  Boolean @default(false)  // Bisa set target
  isActive   Boolean @default(true)   // Status aktif
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  Int?    // Admin yang membuat permission
  
  guru       User     @relation("GuruPermissions", fields: [guruId], references: [id])
  halaqah    Halaqah  @relation("HalaqahPermissions", fields: [halaqahId], references: [id])
  
  @@unique([guruId, halaqahId])
}

enum Semester {
  S1
  S2
}

enum StatusHafalan {
  ziyadah
  murojaah
}

enum StatusTarget {
  belum
  proses
  selesai
}

enum Hari {
  Senin
  Selasa
  Rabu
  Kamis
  Jumat
  Sabtu
  Minggu
}

enum StatusAbsensi {
  alpha
  izin
  masuk
}

enum JenisUjian {
  tasmi
  mhq          // Musabaqah Hifdzil Qur'an
  uas          // Ujian Akhir Semester
  kenaikan_juz // Ujian Kenaikan Juz
  tahfidz
  lainnya
}

enum StatusUjian {
  draft        // Draft, belum selesai
  submitted    // Sudah disubmit guru
  verified     // Sudah diverifikasi musyrif/admin
  rejected     // Ditolak, perlu revisi
}

enum StatusRaport {
  draft        // Draft, belum di-generate
  generated    // Sudah di-generate
  printed      // Sudah dicetak
  distributed  // Sudah dibagikan
}

enum NotifType {
  user
  hafalan
  rapot
  absensi
  pengumuman
}

enum RefType {
  guru
  halaqah
  santri
}

enum TargetAudience {
  semua
  guru
  santri
  ortu
  admin
  yayasan
}
