generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id               Int              @id @default(autoincrement())
  username         String           @unique
  password         String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  foto             String?
  namaLengkap      String
  noTlp            String?
  roleId           Int
  passCode         String?
  alamat           String?
  Absensi          Absensi[]
  logs             AuditLog[]
  Hafalan          Hafalan[]
  guruHalaqah      Halaqah[]
  HalaqahSantri    HalaqahSantri[]
  notif            Notifikasi[]
  sebagaiOrangTua  OrangTuaSantri[] @relation("OrangTua")
  anak             OrangTuaSantri[] @relation("Santri")
  pengumumanDibuat Pengumuman[]
  pengumumanDibaca PengumumanRead[]
  Prestasi         Prestasi[]
  TargetHafalan    TargetHafalan[]
  Ujian            Ujian[]
  guruPermissions  GuruPermission[] @relation("GuruPermissions")
  role             Role             @relation(fields: [roleId], references: [id])
  
  // Template & Ujian Relations
  createdTahunAjaran   TahunAjaran[]    @relation
  createdTemplateUjian TemplateUjian[]  @relation
  createdTemplateRaport TemplateRaport[] @relation
  ujianSantri          UjianSantri[]    @relation("UjianSantri")
  createdUjian         UjianSantri[]    @relation("CreatedUjian")
  verifiedUjian        UjianSantri[]    @relation("VerifiedUjian")
  raportSantri         RaportSantri[]   @relation("RaportSantri")
  createdRaport        RaportSantri[]   @relation("CreatedRaport")
  ujianGuruSantri      UjianGuru[]      @relation("UjianGuruSantri")
  ujianGuruGuru        UjianGuru[]      @relation("UjianGuruGuru")
  
  // Jenis Ujian Relations
  createdJenisUjian    JenisUjian[]     @relation("CreatedJenisUjian")
  createdKomponenPenilaianJenis KomponenPenilaianJenis[] @relation("CreatedKomponenPenilaianJenis")
}

model Halaqah {
  id          Int             @id @default(autoincrement())
  namaHalaqah String
  guruId      Int?            // Make nullable to handle guru deletion
  guru        User?           @relation(fields: [guruId], references: [id], onDelete: SetNull)
  santri      HalaqahSantri[]
  jadwal      Jadwal[]
  ujian       Ujian[]
  permissions GuruPermission[] @relation("HalaqahPermissions")
}

model HalaqahSantri {
  id            Int      @id @default(autoincrement())
  tahunAkademik String
  semester      Semester
  halaqahId     Int
  santriId      Int
  halaqah       Halaqah  @relation(fields: [halaqahId], references: [id], onDelete: Cascade)
  santri        User     @relation(fields: [santriId], references: [id], onDelete: Cascade)
}

model Hafalan {
  id          Int           @id @default(autoincrement())
  tanggal     DateTime
  surat       String
  ayatMulai   Int
  ayatSelesai Int
  status      StatusHafalan
  keterangan  String?
  santriId    Int
  santri      User          @relation(fields: [santriId], references: [id], onDelete: Cascade)
}

model TargetHafalan {
  id         Int          @id @default(autoincrement())
  surat      String
  ayatTarget Int
  deadline   DateTime
  status     StatusTarget
  santriId   Int
  santri     User         @relation(fields: [santriId], references: [id], onDelete: Cascade)
}

model Jadwal {
  id         Int       @id @default(autoincrement())
  hari       Hari
  jamMulai   DateTime
  jamSelesai DateTime
  halaqahId  Int
  
  // NEW FIELDS untuk recurring schedule
  isTemplate Boolean   @default(true)   // Apakah ini template atau jadwal spesifik
  tanggalMulai DateTime? // Tanggal mulai berlaku (opsional)
  tanggalSelesai DateTime? // Tanggal selesai berlaku (opsional)
  isActive   Boolean   @default(true)   // Status aktif/nonaktif
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  
  absensi    Absensi[]
  halaqah    Halaqah   @relation(fields: [halaqahId], references: [id])
}

model Absensi {
  id       Int           @id @default(autoincrement())
  status   StatusAbsensi
  tanggal  DateTime
  santriId Int
  jadwalId Int
  jadwal   Jadwal        @relation(fields: [jadwalId], references: [id], onDelete: Cascade)
  santri   User          @relation(fields: [santriId], references: [id], onDelete: Cascade)
}

model Prestasi {
  id           Int     @id @default(autoincrement())
  namaPrestasi String
  keterangan   String?
  kategori     String?
  tahun        Int
  santriId     Int
  validated    Boolean @default(false)
  santri       User    @relation(fields: [santriId], references: [id], onDelete: Cascade)
}

model Raport {
  id            Int            @id @default(autoincrement())
  semester      Semester
  tahunAkademik String
  validated     Boolean        @default(false)
  details       RaportDetail[]
  ujian         Ujian[]
}

model RaportDetail {
  id           Int      @id @default(autoincrement())
  nilaiAkhir   Float
  catatan      String?
  tanggalCetak DateTime
  raportId     Int
  raport       Raport   @relation(fields: [raportId], references: [id])
}

model Ujian {
  id         Int        @id @default(autoincrement())
  jenis      JenisUjianEnum
  nilai      Float
  tanggal    DateTime
  keterangan String?
  santriId   Int
  halaqahId  Int
  raportId   Int
  halaqah    Halaqah    @relation(fields: [halaqahId], references: [id])
  raport     Raport     @relation(fields: [raportId], references: [id])
  santri     User       @relation(fields: [santriId], references: [id], onDelete: Cascade)
}

// Model untuk Ujian Guru (Form Penilaian Ujian)
model UjianGuru {
  id           Int      @id @default(autoincrement())
  santriId     Int
  guruId       Int
  jenisUjian   String   // 'tasmi', 'mhq', 'uas', 'kenaikan_juz'
  juzMulai     Int
  juzSelesai   Int
  totalNilai   Float
  keterangan   String?
  tanggalUjian DateTime @default(now())
  status       String   @default("SELESAI") // 'SELESAI', 'BERLANGSUNG', 'DIJADWALKAN'
  pengaturan   String?  // JSON string untuk menyimpan settings dan scores
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  santri User @relation("UjianGuruSantri", fields: [santriId], references: [id], onDelete: Cascade)
  guru   User @relation("UjianGuruGuru", fields: [guruId], references: [id], onDelete: Cascade)
}

model Notifikasi {
  id      Int       @id @default(autoincrement())
  pesan   String
  tanggal DateTime  @default(now())
  type    NotifType
  refId   Int?
  userId  Int
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Grafik {
  id         Int     @id @default(autoincrement())
  tipeGrafik String
  periode    String
  dataJson   Json
  refId      Int?
  refType    RefType
}

model Backup {
  id            Int      @id @default(autoincrement())
  namaFile      String
  tanggalBackup DateTime @default(now())
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  action     String
  keterangan String?
  tanggal    DateTime @default(now())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pengumuman {
  id                Int              @id @default(autoincrement())
  judul             String
  isi               String
  tanggal           DateTime         @default(now())
  createdAt         DateTime         @default(now())
  createdBy         Int?             // Make nullable to handle user deletion
  tanggalKadaluarsa DateTime?
  targetAudience    TargetAudience   @default(semua)
  updatedAt         DateTime         @updatedAt
  creator           User?            @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  dibacaOleh        PengumumanRead[]
}

model PengumumanRead {
  id           Int        @id @default(autoincrement())
  pengumumanId Int
  userId       Int
  dibacaPada   DateTime   @default(now())
  pengumuman   Pengumuman @relation(fields: [pengumumanId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pengumumanId, userId])
}

model OrangTuaSantri {
  id         Int  @id @default(autoincrement())
  orangTuaId Int
  santriId   Int
  orangTua   User @relation("OrangTua", fields: [orangTuaId], references: [id], onDelete: Cascade)
  santri     User @relation("Santri", fields: [santriId], references: [id], onDelete: Cascade)

  @@unique([orangTuaId, santriId])
}

model GuruPermission {
  id         Int     @id @default(autoincrement())
  guruId     Int     // Guru yang diberi permission
  halaqahId  Int     // Halaqah yang boleh diakses
  canAbsensi Boolean @default(true)   // Bisa input absensi
  canHafalan Boolean @default(false)  // Bisa input hafalan
  canTarget  Boolean @default(false)  // Bisa set target
  isActive   Boolean @default(true)   // Status aktif
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  Int?    // Admin yang membuat permission
  
  guru       User     @relation("GuruPermissions", fields: [guruId], references: [id], onDelete: Cascade)
  halaqah    Halaqah  @relation("HalaqahPermissions", fields: [halaqahId], references: [id], onDelete: Cascade)
  
  @@unique([guruId, halaqahId])
}

// Model untuk Tahun Ajaran
model TahunAjaran {
  id            Int      @id @default(autoincrement())
  tahunMulai    Int      // 2024
  tahunSelesai  Int      // 2025
  semester      Semester // S1 atau S2
  namaLengkap   String   // "2024/2025 Semester 1"
  tanggalMulai  DateTime
  tanggalSelesai DateTime
  isActive      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     Int?
  
  // Relations
  templateUjian    TemplateUjian[]
  templateRaport   TemplateRaport[]
  ujianSantri      UjianSantri[]
  raportSantri     RaportSantri[]
  
  creator User? @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  
  @@unique([tahunMulai, tahunSelesai, semester])
}

// Model untuk Template Ujian
model TemplateUjian {
  id              Int                @id @default(autoincrement())
  namaTemplate    String             // "Template Ujian Tasmi'"
  jenisUjian      JenisUjianTemplate
  deskripsi       String?
  status          StatusTemplate     @default(aktif)
  tahunAjaranId   Int
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  createdBy       Int?
  
  // Relations
  tahunAjaran        TahunAjaran           @relation(fields: [tahunAjaranId], references: [id], onDelete: Cascade)
  komponenPenilaian  KomponenPenilaian[]
  ujianSantri        UjianSantri[]
  
  creator User? @relation(fields: [createdBy], references: [id], onDelete: SetNull)
}

// Model untuk Jenis Ujian (Master Data)
model JenisUjian {
  id          Int      @id @default(autoincrement())
  nama        String   // "Tasmi'", "MHQ", "UAS", etc.
  kode        String   @unique // "tasmi", "mhq", "uas", etc.
  deskripsi   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int?
  
  // Relations
  komponenPenilaian KomponenPenilaianJenis[]
  creator User? @relation("CreatedJenisUjian", fields: [createdBy], references: [id], onDelete: SetNull)
}

// Model untuk Komponen Penilaian per Jenis Ujian
model KomponenPenilaianJenis {
  id           Int      @id @default(autoincrement())
  jenisUjianId Int
  nama         String   // "Kelancaran", "Tajwid", etc.
  bobot        Float    // 30.0 untuk 30%
  deskripsi    String?
  urutan       Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    Int?
  
  // Relations
  jenisUjian JenisUjian @relation(fields: [jenisUjianId], references: [id], onDelete: Cascade)
  creator User? @relation("CreatedKomponenPenilaianJenis", fields: [createdBy], references: [id], onDelete: SetNull)
}

// Model untuk Komponen Penilaian dalam Template
model KomponenPenilaian {
  id              Int     @id @default(autoincrement())
  templateUjianId Int
  namaKomponen    String  // "Kelancaran", "Ketepatan Ayat", "Tajwid & Makhraj", "Adab & Sikap"
  bobotNilai      Float   // 40.0 untuk 40%
  nilaiMaksimal   Float   @default(100.0)
  nilaiMinimal    Float   @default(0.0)
  deskripsi       String?
  urutan          Int     @default(1)
  isActive        Boolean @default(true)
  
  // Relations
  templateUjian TemplateUjian @relation(fields: [templateUjianId], references: [id], onDelete: Cascade)
  nilaiUjian    NilaiUjian[]
}

// Model untuk Template Raport
model TemplateRaport {
  id                Int      @id @default(autoincrement())
  namaTemplate      String   // "Template Raport Semester 1"
  logoLembaga       String?  // Path ke file logo
  namaLembaga       String
  alamatLembaga     String?
  headerKop         String?  // HTML/Text untuk header
  footerKop         String?  // HTML/Text untuk footer
  tandaTanganKepala String?  // Path ke file tanda tangan
  namaKepala        String?
  jabatanKepala     String?
  formatTabel       Json?    // JSON untuk struktur tabel nilai
  tampilanGrafik    Boolean  @default(true)
  tampilanRanking   Boolean  @default(true)
  catatanTemplate   String?
  tahunAjaranId     Int
  status            StatusTemplate @default(aktif)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         Int?
  
  // Relations
  tahunAjaran   TahunAjaran    @relation(fields: [tahunAjaranId], references: [id], onDelete: Cascade)
  raportSantri  RaportSantri[]
  
  creator User? @relation(fields: [createdBy], references: [id], onDelete: SetNull)
}

// Model untuk Ujian Santri (Data Ujian Aktual)
model UjianSantri {
  id              Int         @id @default(autoincrement())
  santriId        Int
  templateUjianId Int
  tahunAjaranId   Int
  tanggalUjian    DateTime
  nilaiAkhir      Float?      // Nilai akhir hasil perhitungan bobot
  statusUjian     StatusUjian @default(draft)
  catatanGuru     String?
  juzDari         Int?        // Juz mulai untuk ujian
  juzSampai       Int?        // Juz akhir untuk ujian
  diverifikasiBy  Int?        // User ID yang memverifikasi
  tanggalVerifikasi DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  createdBy       Int?        // Guru yang membuat ujian
  
  // Relations
  santri         User              @relation("UjianSantri", fields: [santriId], references: [id], onDelete: Cascade)
  templateUjian  TemplateUjian     @relation(fields: [templateUjianId], references: [id], onDelete: Cascade)
  tahunAjaran    TahunAjaran       @relation(fields: [tahunAjaranId], references: [id], onDelete: Cascade)
  nilaiUjian     NilaiUjian[]
  
  creator     User? @relation("CreatedUjian", fields: [createdBy], references: [id], onDelete: SetNull)
  verifikator User? @relation("VerifiedUjian", fields: [diverifikasiBy], references: [id], onDelete: SetNull)
}

// Model untuk Nilai per Komponen Ujian
model NilaiUjian {
  id                  Int    @id @default(autoincrement())
  ujianSantriId       Int
  komponenPenilaianId Int?   // Nullable untuk UAS yang tidak menggunakan komponen penilaian
  nilaiRaw            Float  // Nilai mentah yang diinput guru
  nilaiTerbobot       Float  // Nilai setelah dikalikan bobot
  catatan             String?
  urutan              Int?   // Urutan untuk UAS (halaman ke-)
  
  // Relations
  ujianSantri       UjianSantri        @relation(fields: [ujianSantriId], references: [id], onDelete: Cascade)
  komponenPenilaian KomponenPenilaian? @relation(fields: [komponenPenilaianId], references: [id], onDelete: Cascade)
}

// Model untuk Raport Santri (Generated Report)
model RaportSantri {
  id               Int      @id @default(autoincrement())
  santriId         Int
  templateRaportId Int
  tahunAjaranId    Int
  nilaiRataRata    Float?   // Rata-rata dari semua ujian
  totalNilaiAkhir  Float?   // Total nilai akhir
  ranking          Int?     // Ranking di kelas/halaqah
  statusKelulusan  String?  // "Lulus", "Tidak Lulus", "Perbaikan"
  catatanGuru      String?
  grafikData       Json?    // Data untuk grafik perkembangan
  tanggalGenerate  DateTime @default(now())
  pathFilePDF      String?  // Path ke file PDF yang di-generate
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdBy        Int?
  
  // Relations
  santri         User           @relation("RaportSantri", fields: [santriId], references: [id], onDelete: Cascade)
  templateRaport TemplateRaport @relation(fields: [templateRaportId], references: [id], onDelete: Cascade)
  tahunAjaran    TahunAjaran    @relation(fields: [tahunAjaranId], references: [id], onDelete: Cascade)
  
  creator User? @relation("CreatedRaport", fields: [createdBy], references: [id], onDelete: SetNull)
  
  @@unique([santriId, tahunAjaranId])
}

enum Semester {
  S1
  S2
}

enum StatusHafalan {
  ziyadah
  murojaah
}

enum StatusTarget {
  belum
  proses
  selesai
}

enum Hari {
  Senin
  Selasa
  Rabu
  Kamis
  Jumat
  Sabtu
  Minggu
}

enum StatusAbsensi {
  alpha
  izin
  masuk
}

enum JenisUjianEnum {
  tahfidz
  tasmi
  lainnya
}

enum NotifType {
  user
  hafalan
  rapot
  absensi
  pengumuman
}

enum RefType {
  guru
  halaqah
  santri
}

enum TargetAudience {
  semua
  guru
  santri
  ortu
  admin
  yayasan
}

enum JenisUjianTemplate {
  tasmi
  mhq
  uas
  kenaikan_juz
  tahfidz
  ujian_harian
  ujian_tengah_semester
}

enum StatusTemplate {
  aktif
  nonaktif
  draft
}

enum StatusUjian {
  draft
  selesai
  diverifikasi
  ditolak
}
